#!/usr/bin/env python3
"""This is the base template for using python scripts as in SBATCH/SRUN via SLURM"""

from os     import environ
from enum   import Enum

class SlurmEnv( Enum ):
    """Set all SLURM ENV variables in this Enum
    https://slurm.schedmd.com/sbatch.html#:~:text=trying%20to%20gather.-,INPUT%20ENVIRONMENT%20VARIABLES,-Upon%20startup%2C%20sbatch
    """
    # Input vars
    sbatch_account = environ.get( "SBATCH_ACCOUNT" )
    sbatch_acctg_freq = environ.get( "SBATCH_ACCTG_FREQ" )
    sbatch_array_inx = environ.get( "SBATCH_ARRAY_INX" )
    sbatch_batch = environ.get( "SBATCH_BATCH" )
    sbatch_clusters = environ.get( "SBATCH_CLUSTERS" )
    slurm_clusters = environ.get( "SLURM_CLUSTERS" )
    sbatch_constraint = environ.get( "SBATCH_CONSTRAINT" )
    sbatch_container = environ.get( "SBATCH_CONTAINER" )
    sbatch_container_id = environ.get( "SBATCH_CONTAINER_ID" )
    sbatch_core_spec = environ.get( "SBATCH_CORE_SPEC" )
    sbatch_cpus_per_gpu = environ.get( "SBATCH_CPUS_PER_GPU" )
    sbatch_debug = environ.get( "SBATCH_DEBUG" )
    sbatch_delay_boot = environ.get( "SBATCH_DELAY_BOOT" )
    sbatch_distribution = environ.get( "SBATCH_DISTRIBUTION" )
    sbatch_error = environ.get( "SBATCH_ERROR" )
    sbatch_exclusive = environ.get( "SBATCH_EXCLUSIVE" )
    sbatch_export = environ.get( "SBATCH_EXPORT" )
    sbatch_get_user_env = environ.get( "SBATCH_GET_USER_ENV" )
    sbatch_gpu_bind = environ.get( "SBATCH_GPU_BIND" )
    sbatch_gpu_freq = environ.get( "SBATCH_GPU_FREQ" )
    sbatch_gpus = environ.get( "SBATCH_GPUS" )
    sbatch_gres = environ.get( "SBATCH_GRES" )
    sbatch_gres_flags = environ.get( "SBATCH_GRES_FLAGS" )
    sbatch_hint = environ.get( "SBATCH_HINT" )
    slurm_hint = environ.get( "SLURM_HINT" )
    sbatch_ignore_pbs = environ.get( "SBATCH_IGNORE_PBS" )
    sbatch_input = environ.get( "SBATCH_INPUT" )
    sbatch_job_name = environ.get( "SBATCH_JOB_NAME" )
    sbatch_mem_bind = environ.get( "SBATCH_MEM_BIND" )
    sbatch_mem_per_cpu = environ.get( "SBATCH_MEM_PER_CPU" )
    sbatch_mem_per_gpu = environ.get( "SBATCH_MEM_PER_GPU" )
    sbatch_mem_per_node = environ.get( "SBATCH_MEM_PER_NODE" )
    sbatch_network = environ.get( "SBATCH_NETWORK" )
    sbatch_no_kill = environ.get( "SBATCH_NO_KILL" )
    sbatch_no_requeue = environ.get( "SBATCH_NO_REQUEUE" )
    sbatch_open_mode = environ.get( "SBATCH_OPEN_MODE" )
    sbatch_output = environ.get( "SBATCH_OUTPUT" )
    sbatch_overcommit = environ.get( "SBATCH_OVERCOMMIT" )
    sbatch_partition = environ.get( "SBATCH_PARTITION" )
    sbatch_power = environ.get( "SBATCH_POWER" )
    sbatch_profile = environ.get( "SBATCH_PROFILE" )
    sbatch_qos = environ.get( "SBATCH_QOS" )
    sbatch_req_switch = environ.get( "SBATCH_REQ_SWITCH" )
    sbatch_requeue = environ.get( "SBATCH_REQUEUE" )
    sbatch_reservation = environ.get( "SBATCH_RESERVATION" )
    sbatch_signal = environ.get( "SBATCH_SIGNAL" )
    sbatch_spread_job = environ.get( "SBATCH_SPREAD_JOB" )
    sbatch_thread_spec = environ.get( "SBATCH_THREAD_SPEC" )
    sbatch_threads_per_core = environ.get( "SBATCH_THREADS_PER_CORE" )
    sbatch_timelimit = environ.get( "SBATCH_TIMELIMIT" )
    sbatch_use_min_nodes = environ.get( "SBATCH_USE_MIN_NODES" )
    sbatch_wait = environ.get( "SBATCH_WAIT" )
    sbatch_wait_all_nodes = environ.get( "SBATCH_WAIT_ALL_NODES" )
    sbatch_wait4switch = environ.get( "SBATCH_WAIT4SWITCH" )
    sbatch_wckey = environ.get( "SBATCH_WCKEY" )
    slurm_conf = environ.get( "SLURM_CONF" )
    slurm_debug_flags = environ.get( "SLURM_DEBUG_FLAGS" )
    slurm_exit_error = environ.get( "SLURM_EXIT_ERROR" )
    slurm_step_killed_msg_node_id = environ.get( "SLURM_STEP_KILLED_MSG_NODE_ID" )
    slurm_umask = environ.get( "SLURM_UMASK" )
    
    # Output vars
    sbatch_mem_bind_list = environ.get( "SBATCH_MEM_BIND_LIST" )
    sbatch_mem_bind_prefer = environ.get( "SBATCH_MEM_BIND_PREFER" )
    sbatch_mem_bind_type = environ.get( "SBATCH_MEM_BIND_TYPE" )
    sbatch_mem_bind_verbose = environ.get( "SBATCH_MEM_BIND_VERBOSE" )
    """
    # Determine best method to set these in enum, as it is a variable number of env
    SLURM_*_HET_GROUP_#
    For a heterogeneous job allocation, the environment variables are set separately for each component.
    """
    slurm_array_job_id = environ.get( "SLURM_ARRAY_JOB_ID" )
    slurm_array_task_count = environ.get( "SLURM_ARRAY_TASK_COUNT" )
    slurm_array_task_id = environ.get( "SLURM_ARRAY_TASK_ID" )
    slurm_array_task_max = environ.get( "SLURM_ARRAY_TASK_MAX" )
    slurm_array_task_min = environ.get( "SLURM_ARRAY_TASK_MIN" )
    slurm_array_task_step = environ.get( "SLURM_ARRAY_TASK_STEP" )
    slurm_cluster_name = environ.get( "SLURM_CLUSTER_NAME" )
    slurm_cpus_on_node = environ.get( "SLURM_CPUS_ON_NODE" )
    slurm_cpus_per_gpu = environ.get( "SLURM_CPUS_PER_GPU" )
    slurm_cpus_per_task = environ.get( "SLURM_CPUS_PER_TASK" )
    slurm_container = environ.get( "SLURM_CONTAINER" )
    slurm_container_id = environ.get( "SLURM_CONTAINER_ID" )
    slurm_dist_planesize = environ.get( "SLURM_DIST_PLANESIZE" )
    slurm_distribution = environ.get( "SLURM_DISTRIBUTION" )
    slurm_export_env = environ.get( "SLURM_EXPORT_ENV" )
    slurm_gpu_bind = environ.get( "SLURM_GPU_BIND" )
    slurm_gpu_freq = environ.get( "SLURM_GPU_FREQ" )
    slurm_gpus = environ.get( "SLURM_GPUS" )
    slurm_gpus_on_node = environ.get( "SLURM_GPUS_ON_NODE" )
    slurm_gpus_per_node = environ.get( "SLURM_GPUS_PER_NODE" )
    slurm_gpus_per_socket = environ.get( "SLURM_GPUS_PER_SOCKET" )
    slurm_gpus_per_task = environ.get( "SLURM_GPUS_PER_TASK" )
    slurm_gtids = environ.get( "SLURM_GTIDS" )
    slurm_het_size = environ.get( "SLURM_HET_SIZE" )
    slurm_job_account = environ.get( "SLURM_JOB_ACCOUNT" )
    slurm_job_cpus_per_node = environ.get( "SLURM_JOB_CPUS_PER_NODE" )
    slurm_job_dependency = environ.get( "SLURM_JOB_DEPENDENCY" )
    slurm_job_end_time = environ.get( "SLURM_JOB_END_TIME" )
    slurm_job_gpus = environ.get( "SLURM_JOB_GPUS" )
    slurm_job_id = environ.get( "SLURM_JOB_ID" )
    slurm_job_name = environ.get( "SLURM_JOB_NAME" )
    slurm_job_nodelist = environ.get( "SLURM_JOB_NODELIST" )
    slurm_job_num_nodes = environ.get( "SLURM_JOB_NUM_NODES" )
    slurm_job_partition = environ.get( "SLURM_JOB_PARTITION" )
    slurm_job_qos = environ.get( "SLURM_JOB_QOS" )
    slurm_job_reservation = environ.get( "SLURM_JOB_RESERVATION" )
    slurm_job_start_time = environ.get( "SLURM_JOB_START_TIME" )
    slurm_jobid = environ.get( "SLURM_JOBID" )
    slurm_localid = environ.get( "SLURM_LOCALID" )
    slurm_mem_per_cpu = environ.get( "SLURM_MEM_PER_CPU" )
    slurm_mem_per_gpu = environ.get( "SLURM_MEM_PER_GPU" )
    slurm_mem_per_node = environ.get( "SLURM_MEM_PER_NODE" )
    slurm_nnodes = environ.get( "SLURM_NNODES" )
    slurm_node_aliases = environ.get( "SLURM_NODE_ALIASES" )
    slurm_nodeid = environ.get( "SLURM_NODEID" )
    slurm_nodelist = environ.get( "SLURM_NODELIST" )
    slurm_nprocs = environ.get( "SLURM_NPROCS" )
    slurm_ntasks = environ.get( "SLURM_NTASKS" )
    slurm_ntasks_per_core = environ.get( "SLURM_NTASKS_PER_CORE" )
    slurm_ntasks_per_gpu = environ.get( "SLURM_NTASKS_PER_GPU" )
    slurm_ntasks_per_node = environ.get( "SLURM_NTASKS_PER_NODE" )
    slurm_ntasks_per_socket = environ.get( "SLURM_NTASKS_PER_SOCKET" )
    slurm_overcommit = environ.get( "SLURM_OVERCOMMIT" )
    slurm_prio_process = environ.get( "SLURM_PRIO_PROCESS" )
    slurm_procid = environ.get( "SLURM_PROCID" )
    slurm_profile = environ.get( "SLURM_PROFILE" )
    slurm_restart_count = environ.get( "SLURM_RESTART_COUNT" )
    slurm_shards_on_node = environ.get( "SLURM_SHARDS_ON_NODE" )
    slurm_submit_dir = environ.get( "SLURM_SUBMIT_DIR" )
    slurm_submit_host = environ.get( "SLURM_SUBMIT_HOST" )
    slurm_task_pid = environ.get( "SLURM_TASK_PID" )
    slurm_tasks_per_node = environ.get( "SLURM_TASKS_PER_NODE" )
    slurm_threads_per_core = environ.get( "SLURM_THREADS_PER_CORE" )
    slurm_topology_addr = environ.get( "SLURM_TOPOLOGY_ADDR" )
    slurm_topology_addr_pattern = environ.get( "SLURM_TOPOLOGY_ADDR_PATTERN" )
    slurmd_nodename = environ.get( "SLURMD_NODENAME" )


if __name__ == '__main__':
    for attr in SlurmEnv:
        print( f"{attr.name}\t{attr.value}" )
    print( SlurmEnv.slurmd_nodename )